// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: edgemgmt/edgemgmt.proto

package go_edgemgmt_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EdgeManagementClient is the client API for EdgeManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EdgeManagementClient interface {
	ActivateNewDevice(ctx context.Context, in *NewDevice, opts ...grpc.CallOption) (*ActivationStatus, error)
}

type edgeManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewEdgeManagementClient(cc grpc.ClientConnInterface) EdgeManagementClient {
	return &edgeManagementClient{cc}
}

func (c *edgeManagementClient) ActivateNewDevice(ctx context.Context, in *NewDevice, opts ...grpc.CallOption) (*ActivationStatus, error) {
	out := new(ActivationStatus)
	err := c.cc.Invoke(ctx, "/edgemgmt.EdgeManagement/ActivateNewDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EdgeManagementServer is the server API for EdgeManagement service.
// All implementations must embed UnimplementedEdgeManagementServer
// for forward compatibility
type EdgeManagementServer interface {
	ActivateNewDevice(context.Context, *NewDevice) (*ActivationStatus, error)
	mustEmbedUnimplementedEdgeManagementServer()
}

// UnimplementedEdgeManagementServer must be embedded to have forward compatible implementations.
type UnimplementedEdgeManagementServer struct {
}

func (UnimplementedEdgeManagementServer) ActivateNewDevice(context.Context, *NewDevice) (*ActivationStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateNewDevice not implemented")
}
func (UnimplementedEdgeManagementServer) mustEmbedUnimplementedEdgeManagementServer() {}

// UnsafeEdgeManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EdgeManagementServer will
// result in compilation errors.
type UnsafeEdgeManagementServer interface {
	mustEmbedUnimplementedEdgeManagementServer()
}

func RegisterEdgeManagementServer(s grpc.ServiceRegistrar, srv EdgeManagementServer) {
	s.RegisterService(&EdgeManagement_ServiceDesc, srv)
}

func _EdgeManagement_ActivateNewDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeManagementServer).ActivateNewDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgemgmt.EdgeManagement/ActivateNewDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeManagementServer).ActivateNewDevice(ctx, req.(*NewDevice))
	}
	return interceptor(ctx, in, info, handler)
}

// EdgeManagement_ServiceDesc is the grpc.ServiceDesc for EdgeManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EdgeManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "edgemgmt.EdgeManagement",
	HandlerType: (*EdgeManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ActivateNewDevice",
			Handler:    _EdgeManagement_ActivateNewDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "edgemgmt/edgemgmt.proto",
}

// EdgePaymentClient is the client API for EdgePayment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EdgePaymentClient interface {
	ProcessPayment(ctx context.Context, in *Payment, opts ...grpc.CallOption) (*PaymentStatus, error)
}

type edgePaymentClient struct {
	cc grpc.ClientConnInterface
}

func NewEdgePaymentClient(cc grpc.ClientConnInterface) EdgePaymentClient {
	return &edgePaymentClient{cc}
}

func (c *edgePaymentClient) ProcessPayment(ctx context.Context, in *Payment, opts ...grpc.CallOption) (*PaymentStatus, error) {
	out := new(PaymentStatus)
	err := c.cc.Invoke(ctx, "/edgemgmt.EdgePayment/ProcessPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EdgePaymentServer is the server API for EdgePayment service.
// All implementations must embed UnimplementedEdgePaymentServer
// for forward compatibility
type EdgePaymentServer interface {
	ProcessPayment(context.Context, *Payment) (*PaymentStatus, error)
	mustEmbedUnimplementedEdgePaymentServer()
}

// UnimplementedEdgePaymentServer must be embedded to have forward compatible implementations.
type UnimplementedEdgePaymentServer struct {
}

func (UnimplementedEdgePaymentServer) ProcessPayment(context.Context, *Payment) (*PaymentStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessPayment not implemented")
}
func (UnimplementedEdgePaymentServer) mustEmbedUnimplementedEdgePaymentServer() {}

// UnsafeEdgePaymentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EdgePaymentServer will
// result in compilation errors.
type UnsafeEdgePaymentServer interface {
	mustEmbedUnimplementedEdgePaymentServer()
}

func RegisterEdgePaymentServer(s grpc.ServiceRegistrar, srv EdgePaymentServer) {
	s.RegisterService(&EdgePayment_ServiceDesc, srv)
}

func _EdgePayment_ProcessPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgePaymentServer).ProcessPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgemgmt.EdgePayment/ProcessPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgePaymentServer).ProcessPayment(ctx, req.(*Payment))
	}
	return interceptor(ctx, in, info, handler)
}

// EdgePayment_ServiceDesc is the grpc.ServiceDesc for EdgePayment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EdgePayment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "edgemgmt.EdgePayment",
	HandlerType: (*EdgePaymentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessPayment",
			Handler:    _EdgePayment_ProcessPayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "edgemgmt/edgemgmt.proto",
}
